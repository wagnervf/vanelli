<template>
  <div class="full-width q-gutter-sm">
   
    <q-dialog
      v-model="dialog"
      persistent
      :maximized="maximizedToggle"
      transition-show="slide-up"
      transition-hide="slide-down"
    >
      <q-card class="bg-white">
        <q-card-section class="row bg-red-4 flex">
          <div class="col text-h5 text-white">Editar Despesa</div>        
          <div class="col text-right">
            <q-btn
              round
              flat
              color="white"
              icon="close"
              v-close-popup             
            />
          </div>
        </q-card-section>
       
        <q-card-section>
          <q-form role="form" class="q-gutter-sm"
          >
            <inputDate label="Data" @update="setData($event)" />
            
            <q-select
              filled
              v-model="form.categoria"
              use-input
              input-debounce="0"
              label="Categoria"
              :options="options"
              @filter="filterFn"
              behavior="menu"
              transition-show="flip-up"
              transition-hide="flip-down"
              clearable
              :rules="[
                (val) => (val !== null && val !== '') || 'Informe a Categoria',
              ]"
            >
              <template v-slot:no-option>
                <q-item>
                  <q-item-section class="text-grey">
                    No results
                  </q-item-section>
                </q-item>
              </template>
            </q-select>

            <q-input
              filled
              v-model="form.descricao"
              label="Descrição"
              type="text"
              reverse-fill-mask
              input-class="text-left"            
              lazy-rules
              :rules="[(val) => (val && val.length > 0) || 'Valor Obrigatório']"
            />

            <q-input
              filled
              v-model="valorDespesa"
              label="Valor"
              type="number"
              mask="#,##"
              reverse-fill-mask
              input-class="text-left"
              prefix="R$"
              class="text-h6"
              lazy-rules
              :rules="[(val) => (val && val.length > 0) || 'Valor Obrigatório']"
              clearable
            />

            <q-input
              filled
              v-model="form.observacao"
              type="textarea"
              label="Observação"
            />

            <div class="text-right q-mt-md q-gutter-x-sm">
              <q-btn
                label="Cancelar"
                type="reset"
                color="red-4"
                v-close-popup
                class="q-ml-sm"
                outline
              />
              <q-btn
                label="Salvar"
                @click="onSubmit()"
                color="teal"
                outline
              />
            </div>
          </q-form>
        </q-card-section>

        {{this.form}}
      </q-card>
    </q-dialog>


  </div>
</template>
<script>
const stringOptions = [
        "Conta Fixa",
        "Obra",
        "Ampliação",
        "Reforma",
        "Segurança",
        "Reposição",];
import inputDate from "../../components/input_date";
import { mapActions } from 'vuex'
export default {
  props: {  
    dados: {
      type: Object,
      default: {}
    }
  },
  components: {
    inputDate,
  },
  data() {
    return {
     // dialog: false,
      maximizedToggle: true,
      form: {
        id:'',
        data: '',
        categoria: '',
        descricao: '',
        valor: '',
        observacao: ''
      },
      valorDespesa:'',
      model: null,
      stringOptions:'',
      options: stringOptions,
    
      dialog:false
    };
  },

  computed:{
  },

  methods: {
    ...mapActions('store', ['updateDespesaUserCategoria']),

    onSubmit() {
      this.onReset()
     // this.dialog = true

     console.log(this.form)

    //  this.updateDespesaUserCategoria(this.form)

      this.$q.notify({
        color: "green-4",
        textColor: "white",
        icon: "cloud_done",
        message: 'Dados salvos com sucesso!'
       // message: "Submitted"
      });
    },

    setData(value) {
      this.form.data = value;
    },
    onReset() {
      this.form = []
    },

    filterFn(val, update) {
      if (val === "") {
        update(() => {
          this.options = stringOptions;
        });
        return;
      }

      update(() => {
        const needle = val.toLowerCase();
        this.options = stringOptions.filter(
          (v) => v.toLowerCase().indexOf(needle) > -1
        );
      });
    },
  },

  watch:{
    valorDespesa(value){
      this.form.valor = Number(value)
    },

    dados(value){
      this.form.id = value.id
      this.form.data = value.data
      this.form.categoria = value.categoria
      this.form.descricao = value.descricao
      this.form.valor = value.valor
      this.form.observacao = value.observacao

      this.dialog =true
    },

  }
};
</script>
